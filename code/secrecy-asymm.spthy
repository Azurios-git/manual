theory SECRECYASYMM
begin

builtins: asymmetric-encryption

/* We formalize the following protocol:

    1. A -> B: {A,na}pk(B)

*/

// Public key infrastructure
rule Register_pk:
  [ Fr(~ltkA) ]
  -->
  [ !Ltk($A, ~ltkA)
  , !Pk($A, pk(~ltkA))
  , Out(pk(~ltkA)) 
  ] 

// Compromising an agent's long-term key
rule Reveal_ltk:
  [ !Ltk(A, ltkA) ] --[ Reveal(A) ]-> [ Out(ltkA) ]

// Role A sends first message
rule A_1_send:
  [ Fr(~id)  
  , Fr(~na)
  , !Ltk(A, ltkA)
  , !Pk(B, pkB)
  ]
--[ Send(A, aenc(<A, ~na>, pkB)) 
  , Secret_A(~na), Honest(A), Honest(B)
  ]->
  [ St_A_1(A, ~id, ltkA, pkB, B, ~na) 
  , Out(aenc(<A, ~na>, pkB))
  ]

// Role B receives first message
rule B_1_receive:
  [ Fr(~id)
  , !Ltk(B, ltkB)
  , !Pk(A, pkA)
  , In(aenc(<A, na>,pkB))
  ]
--[ Recv(B, aenc(<A, na>, pkB)) 
  , Secret_B(na), Honest(B), Honest(A)
  ]->
  [ St_B_1(B, ~id, ltkB, pkA, A, na)
  ]

lemma executable:
  exists-trace
    "Ex A B m #i #j. Send(A,m)@i & Recv(B,m) @j"

lemma secret_A:
  all-traces
    "All n #i. Secret_A(n) @i ==> (not (Ex #j. K(n)@j)) | (Ex B #j. Reveal(B)@j & Honest(B)@i)"

lemma secret_B:
  all-traces
    "All n #i. Secret_B(n) @i ==> (not (Ex #j. K(n)@j)) | (Ex B #j. Reveal(B)@j & Honest(B)@i)"


end
